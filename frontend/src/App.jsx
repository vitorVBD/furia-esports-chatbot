import React, { useState, useRef, useEffect } from "react";

function App() {
  const [messages, setMessages] = useState([
    { text: "Bem vindo ao chatbot FURIOSO! \n\n (Digite 'comandos' para listar os comandos)", type: "bot" },
  ]);
  const [userInput, setUserInput] = useState("");
  const messagesEndRef = useRef(null);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  const handleSend = async () => {
    if (!userInput.trim()) return;

    const userMessage = { text: userInput, type: "user" };
    setMessages((prev) => [...prev, userMessage]);

    const botReply = await getBotReply(userInput);
    setMessages((prev) => [...prev, { text: botReply, type: "bot" }]);
    setUserInput("");
  };

  const fetchData = async (url) => {
    try {
      const res = await fetch(url);
      return await res.json();
    } catch {
      return { error: "Erro na conex√£o com o servidor." };
    }
  };

  const getBotReply = async (inputRaw) => {
    const input = inputRaw.toLowerCase();

    switch (true) {
      case input.includes("pr√≥ximo jogo"): {
        const data = await fetchData("http://localhost:8000/next-match");
        if (data.name) {
          return `üïπÔ∏è Pr√≥xima partida da FURIA: ${data.name}
üóìÔ∏è Data: ${new Date(data.start_date).toLocaleString()}
üÜö Advers√°rio(s): ${data.location}`;
        }
        return data.message || "N√£o consegui encontrar a pr√≥xima partida.";
      }

      case input.includes("√∫ltimo jogo") ||
        input.includes("√∫ltimos resultados"): {
        const data = await fetchData("http://localhost:8000/last-match");
        if (data.match_name) {
          return `üéÆ √öltimo jogo:
${data.match_name}
üìù Resultado: ${data.result}
üìÖ Data: ${new Date(data.date).toLocaleString()}`;
        }
        return data.message || "N√£o consegui encontrar o √∫ltimo jogo.";
      }

      case input.includes("estat√≠sticas") ||
        input.includes("kills") ||
        input.includes("adr"): {
        const playerName = input.split(" ")[1] || "";
        const data = await fetchData(
          `http://localhost:8000/player-stats?player_name=${playerName}`
        );
        if (data.player) {
          return `üìä Estat√≠sticas de ${data.player}:
Kills: ${data.kills}
Deaths: ${data.deaths}
ADR: ${data.adr}`;
        }
        return (
          data.error || "N√£o consegui encontrar as estat√≠sticas desse jogador."
        );
      }

      case input.includes("lineup") || input.includes("jogadores"): {
        const gender = input.includes("feminina") ? "feminino" : "masculino";
        const data = await fetchData(
          `http://localhost:8000/lineup?gender=${gender}`
        );
        if (data.lineup) {
          return `üéÆ Lineup atual da FURIA (${gender}):\n- ${data.lineup.join(
            "\n- "
          )}`;
        }
        return data.error || "N√£o consegui encontrar a lineup.";
      }

      case input.includes("mapas") || input.includes("map"): {
        const data = await fetchData("http://localhost:8000/maps");
        if (data.maps) {
          return `üó∫Ô∏è Lista de mapas do CS:\n- ${data.maps.join("\n- ")}`;
        }
        return data.error || "N√£o consegui encontrar os mapas.";
      }

      case input.includes("pr√≥ximas partidas") ||
        input.includes("pr√≥ximos jogos"): {
        const data = await fetchData(
          "http://localhost:8000/next-three-matches"
        );
        if (data.matches) {
          const formatted = data.matches.map((match) => {
        const date = new Date(match.date).toLocaleString("pt-BR", {
          dateStyle: "short",
          timeStyle: "short",
        });
        return `${match.opponents.join(" üÜö ")}\nüìÖ Data: ${date} Horas`;
          });
          return `üìÖ Pr√≥ximas tr√™s partidas:\n\n${formatted.join("\n\n")}`;
        }
        return data.error || "‚ùå N√£o consegui encontrar as partidas.";
      }

      case input.includes("campeonatos est√£o rolando") ||
        input.includes("campeonatos atuais"): {
        const data = await fetchData(
          "http://localhost:8000/current-tournaments"
        );
        if (data.tournaments) {
          const formatted = data.tournaments.map((t) => {
        const date = new Date(t.start_date).toLocaleDateString("pt-BR");
        return `üèÜ ${t.name}\n   ‚Ä¢ Fase: ${t.stage}\n   ‚Ä¢ Iniciou em: ${date}`;
          });
          return `Campeonatos em andamento:\n\n${formatted.join("\n\n")}`;
        }
        return data.error || "N√£o consegui encontrar campeonatos em andamento.";
      }

      case input.includes("campeonatos futuros") ||
        input.includes("pr√≥ximos campeonatos"): {
        const data = await fetchData(
          "http://localhost:8000/upcoming-tournaments"
        );
        if (data.tournaments) {
          const formatted = data.tournaments.map((t) => {
            const date = new Date(t.start_date).toLocaleDateString("pt-BR");
            return `üèÜ ${t.name}\n   ‚Ä¢ ${t.stage}\n   ‚Ä¢ üìÜ come√ßa em: ${date})`;
          });
          return `Pr√≥ximos campeonatos:\n\n ${formatted.join("\n\n")}`;
        }
        return data.error || "N√£o encontrei campeonatos futuros.";
      }

      case input.includes("armas do jogo") ||
        input.includes("todas as armas") ||
        input.includes("armas do cs"): {
        const data = await fetchData("http://localhost:8000/game-weapons");
        if (data.weapons) {
          return `üî´ Armas dispon√≠veis no jogo:\n\n${data.weapons
            .slice(0, 5)
            .map((w) => `‚Ä¢ ${w.name} (${w.kind})`)
            .join("\n\n")}`;
        }
        return data.error || "N√£o consegui encontrar as armas.";
      }

      case input.includes("furia") || input.includes("sobre a furia"): {
        return `A FURIA Esports √© uma organiza√ß√£o brasileira de esports fundada em 2017 por Andr√© Akkari, Jaime P√°dua e Cris Guedes. Inicialmente focada em Counter-Strike: Global Offensive (CS:GO), a FURIA expandiu para diversas outras modalidades, como Rocket League, League of Legends, Valorant, Rainbow Six: Siege e Apex Legends. A organiza√ß√£o √© conhecida por sua forte presen√ßa no cen√°rio competitivo e pela sua popularidade entre os f√£s de esports.`;
      }

      case input.includes("comandos") || input.includes("lista de comandos"): {
        return `Aqui est√£o alguns comandos que voc√™ pode usar:
        
- 'Sobre a FURIA'
- 'Qual o pr√≥ximo jogo da FURIA?'
- 'Qual foi o √∫ltimo jogo da FURIA?'
- 'Quem est√° na lineup masculina ou feminina da FURIA?'
- 'Quais s√£o os mapas do CS?'
- 'Quais s√£o as armas do jogo?'
- 'Quais s√£o as pr√≥ximas partidas?'
- 'Quais s√£o os pr√≥ximos campeonatos?'
- 'Quais campeonatos est√£o rolando?'
- 'Quais s√£o as estat√≠sticas do jogador [nome]?'`;
      }

      default:
        return "Ainda n√£o entendi sua pergunta üòÖ \n Digite 'comandos' para ver a lista completa de comandos";
    }
  };

  return (
    <div className="chat-container">
      <div className="chat-box">
        {messages.map((message, index) => (
          <div
            key={index}
            className={message.type === "bot" ? "bot-message" : "user-message"}
          >
            {message.text}
          </div>
        ))}
        <div ref={messagesEndRef} />
      </div>
      <input
        type="text"
        value={userInput}
        onChange={(e) => setUserInput(e.target.value)}
        placeholder="Pergunte sobre CS ou sobre a FURIA..."
        onKeyDown={(e) => e.key === "Enter" && handleSend()}
      />
      <button onClick={handleSend}>Enviar</button>
      <footer className="footer">
      Desenvolvido por Vitor Bittencourt
    </footer>
    </div>
  );
}

export default App;
